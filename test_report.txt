
> team-website@0.1.0 test
> react-scripts test "--coverage"

FAIL src/App.test.tsx
  ‚úï renders learn react link (59 ms)

  ‚óè renders learn react link

    TestingLibraryElementError: Unable to find an element with the text: /learn react/i. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.

    Ignored nodes: comments, <script />, <style />
    [36m<body>[39m
      [36m<div>[39m
        [36m<div[39m
          [33mclass[39m=[32m"App"[39m
        [36m>[39m
          [36m<header[39m
            [33mclass[39m=[32m"App-header"[39m
          [36m>[39m
            [0mReact: Hooks In A Nutshell[0m
          [36m</header>[39m
          [36m<h2>[39m
            [0mIntro/Background[0m
            [0m [0m
            [36m<button[39m
              [33mclass[39m=[32m"btn btn-primary"[39m
              [33mtype[39m=[32m"button"[39m
            [36m>[39m
              [0mShow/Hide[0m
            [36m</button>[39m
          [36m</h2>[39m
          [36m<div>[39m
            [36m<div[39m
              [33mclass[39m=[32m"App-body"[39m
            [36m>[39m
              [36m<p>[39m
                [0mBefore delving further into React hooks we need to discuss some vocabulary. It is important to know that React is divided into Components, and each component has its own state. So some important vocabulary in regards to state are:[0m
                [0m [0m
              [36m</p>[39m
              [36m<li>[39m
                [36m<ul>[39m
                  [0mModel: describes the possible values that the State can live in.[0m
                [36m</ul>[39m
                [36m<ul>[39m
                  [0mView: what shows your current State[0m
                [36m</ul>[39m
                [36m<ul>[39m
                  [0mController: part that allows changes to be made to the current State[0m
                [36m</ul>[39m
              [36m</li>[39m
              [36m<p>[39m
                [0mReact is organized by Components, and each of these Components has a State. The main Component that is focused on is called App and therefore its State is the most important. This State is our[0m
                [0m [0m
                [36m<strong>[39m
                  [0mModel[0m
                [36m</strong>[39m
                [0m. The Components function which simply returns HTML as something to display is our [0m
                [36m<strong>[39m
                  [0mView[0m
                [36m</strong>[39m
                [0m. Finally the View can have interactability such as clicking buttons, checkmarks, or entering text. These events can be bound to functions that are called when the even occurs that modify the Model. The functions are the [0m
                [36m<strong>[39m
                  [0mControllers[0m
                [36m</strong>[39m
                [0m.[0m
              [36m</p>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<h2>[39m
            [0museState[0m
            [0m [0m
            [36m<button[39m
              [33mclass[39m=[32m"btn btn-primary"[39m
              [33mtype[39m=[32m"button"[39m
            [36m>[39m
              [0mShow/Hide[0m
            [36m</button>[39m
          [36m</h2>[39m
          [36m<div>[39m
            [36m<div[39m
              [33mclass[39m=[32m"App-body"[39m
            [36m>[39m
              [36m<p>[39m
                [0museState is the example of a React Hook that we will be focusing on.The most important line for useState is below: [0m
                [0m
    [0m
              [36m</p>[39m
              [36m<p>[39m
                [0m[state,setState] = useState[0m
                [0m&lt;type&gt;[0m
                [0m(initialValue)[0m
              [36m</p>[39m
              [36m<li>[39m
                [36m<ul>[39m
                  [0mstate: represents our current Model[0m
                [36m</ul>[39m
                [36m<ul>[39m
                  [0msetState: sets the state of our Model, this is a low level Controller[0m
                [36m</ul>[39m
                [36m<ul>[39m
                  [0museState: This creates the hook for storing our Model, it will return the state and setState[0m
                [36m</ul>[39m
                [36m<ul>[39m
                  [0mtype: this is the type of the state[0m
                [36m</ul>[39m
                [36m<ul>[39m
                  [0minitialValue: The initial value in state, it should be the same type as type[0m
                [36m</ul>[39m
              [36m</li>[39m
              [36m<p>[39m
                [0mKey things to remember when using useState is that useState should not be put inside loops, conditionals, or functions, and useState must always be called within a Component Funciton.[0m
              [36m</p>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<h2>[39m
            [0mHooks[0m
            [0m [0m
            [36m<button[39m
              [33mclass[39m=[32m"btn btn-primary"[39m
              [33mtype[39m=[32m"button"[39m
            [36m>[39m
              [0mShow/Hide[0m
            [36m</button>[39m
          [36m</h2>[39m
          [36m<div>[39m
            [36m<div[39m
              [33mclass[39m=[32m"App-body"[39m
            [36m>[39m
              [36m<p>[39m
                [0mIn the case of useState the hook is created by the useState part of the command. This creates a hook for us to store our state setState on. As the data exists on the hook it will persist when when the Component Function is rendered again. The Component Function is called to rerender again when the setState function has been called. The hook is needed as local variables would not stick around with a new call to the Component Function.[0m
              [36m</p>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<h2>[39m
            [0mExamples and Some Fun[0m
            [0m [0m
            [36m<button[39m
              [33mclass[39m=[32m"btn btn-primary"[39m
              [33mtype[39m=[32m"button"[39m
            [36m>[39m
              [0mShow/Hide[0m
            [36m</button>[39m
          [36m</h2>[39m
          [36m<div>[39m
            [36m<div[39m
              [33mclass[39m=[32m"App-body"[39m
            [36m>[39m
              [36m<h4>[39m
                [0mExample of trying to use local variable:[0m
              [36m</h4>[39m
              [36m<div>[39m
                [0mYour current number is at: [0m
                [0m0[0m
                [36m<button[39m
                  [33mclass[39m=[32m"btn btn-primary"[39m
                  [33mtype[39m=[32m"button"[39m
                [36m>[39m
                  [0mAdd One[0m
                [36m</button>[39m
                [36m<button[39m
                  [33mclass[39m=[32m"btn btn-primary"[39m
                  [33mtype[39m=[32m"button"[39m
                [36m>[39m
                  [0mSubtract One[0m
                [36m</button>[39m
                [36m<br />[39m
                [36m<img[39m
                  [33malt[39m=[32m"code for BadCounter"[39m
                  [33mclass[39m=[32m"sampleCode"[39m
                  [33msrc[39m=[32m"BrokenCounter.jpg"[39m
                [36m/>[39m
                [36m<br />[39m
                [36m<p>[39m
                  [0mOn line 5 we declare a local variable counter that is initialized to 0. Two functions are declared below it, one the adds one to counter, and one that subtracts one from counter. These functions are called when their corresponding button is clicked. However this code will not work. This is because when the Component is called it does not remember the previous value of counter and instead initializes it back to 0.[0m
                [36m</p>[39m
              [36m</div>[39m
              [36m<h4>[39m
                [0mExample of using State to make a counter:[0m
              [36m</h4>[39m
              [36m<div>[39m
                [0m [0m
                [0mYour current number is at: [0m
                [0m0[0m
                [36m<button[39m
                  [33mclass[39m=[32m"btn btn-primary"[39m
                  [33mtype[39m=[32m"button"[39m
                [36m>[39m
                  [0mAdd One[0m
                [36m</button>[39m
                [36m<button[39m
                  [33mclass[39m=[32m"btn btn-primary"[39m
                  [33mtype[39m=[32m"button"[39m
                [36m>[39m
                  [0mSubtract One[0m
                [36m</button>[39m
                [36m<br />[39m
                [36m<img[39m
                  [33malt[39m=[32m"code for Counter"[39m
                  [33mclass[39m=[32m"sampleCode"[39m
                  [33msrc[39m=[32m"CounterCode.jpg"[39m
                [36m/>[39m
                [36m<br />[39m
                [36m<p>[39m
                  [0mOn line 5 the useState is written in this case the state is counter, the setState is setCounter, the type is a number, and the intial value is 0. The next line then displays what the state currently is. Finally the two buttons update the state onClick by calling setCounter(counter+1 or counter-1 depending on the button).[0m
                [36m</p>[39m
              [36m</div>[39m
              [36m<h4>[39m
                [0mExample with memes:[0m
              [36m</h4>[39m
              [36m<div>[39m
                [36m<img[39m
                  [33malt[39m=[32m"React memes"[39m
                  [33mclass[39m=[32m"memezee"[39m
                  [33msrc[39m=[32m"react-hooks.jpg"[39m
                [36m/>[39m
                [36m<br />[39m
                [36m<img[39m
                  [33malt[39m=[32m"code for clickThroughMeme"[39m
                  [33mclass[39m=[32m"sampleCode"[39m
                  [33msrc[39m=[32m"memeCode.jpg"[39m
                [36m/>[39m
                [36m<p>[39m
                  [0mIn the code above the useState we use is one line 10, in this case the state is meme, setState is changeMemes, type is number, and initialValue is 0. On line 14 a function called clickMemes generates a random number between 0 and the length of the listOfMemes on line 9. changeMemes is then called with this number. Finally a return of an image based on the value of meme is returned that when clicked on will call the clickMemes[0m
                [36m</p>[39m
              [36m</div>[39m
            [36m</div>[39m
          [36m</div>[39m
          [36m<h2>[39m
            [0mFurther Reading[0m
            [0m [0m
            [36m<button[39m
              [33mclass[39m=[32m"btn btn-primary"[39m
              [33mtype[39m=[32m"button"[39m
            [36m>[39m
              [0mShow/Hide[0m
            [36m</button>[39m
          [36m</h2>[39m
          [36m<div>[39m
            [36m<div[39m
              [33mclass[39m=[32m"App-body"[39m
            [36m>[39m
              [36m<li>[39m
                [36m<ul>[39m
                  [36m<a[39m
                    [33mhref[39m=[32m"https://frontend-fun.github.io/react-hooks-typescript-tome/4-state/state.html#model-view-and-controller"[39m
                  [36m>[39m
                    [0mReact TypeScript Tome[0m
                  [36m</a>[39m
                [36m</ul>[39m
                [36m<ul>[39m
                  [36m<a[39m
                    [33mhref[39m=[32m"https://reactjs.org/docs/hooks-intro.html"[39m
                  [36m>[39m
                    [0mIntro to Hooks on reactjs.org[0m
                  [36m</a>[39m
                [36m</ul>[39m
                [36m<ul>[39m
                  [36m<a[39m
                    [33mhref[39m=[32m"https://www.w3schools.com/react/react_hooks.asp"[39m
                  [36m>[39m
                    [0mHooks at w3schools[0m
                  [36m</a>[39m
                [36m</ul>[39m
              [36m</li>[39m
            [36m</div>[39m
          [36m</div>[39m
        [36m</div>[39m
      [36m</div>[39m
    [36m</body>[39m

       5 | test("renders learn react link", () => {
       6 |   render(<App />);
    >  7 |   const linkElement = screen.getByText(/learn react/i);
         |                              ^
       8 |   expect(linkElement).toBeInTheDocument();
       9 | });
      10 |

      at Object.getElementError (node_modules/@testing-library/dom/dist/config.js:38:19)
      at node_modules/@testing-library/dom/dist/query-helpers.js:90:38
      at node_modules/@testing-library/dom/dist/query-helpers.js:62:17
      at getByText (node_modules/@testing-library/dom/dist/query-helpers.js:111:19)
      at Object.<anonymous> (src/App.test.tsx:7:30)
      at TestScheduler.scheduleTests (node_modules/@jest/core/build/TestScheduler.js:333:13)
      at runJest (node_modules/@jest/core/build/runJest.js:404:19)
      at _run10000 (node_modules/@jest/core/build/cli/index.js:320:7)
      at runCLI (node_modules/@jest/core/build/cli/index.js:173:3)

----------------------|---------|----------|---------|---------|-------------------
File                  | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s 
----------------------|---------|----------|---------|---------|-------------------
All files             |   41.66 |    71.42 |      25 |   41.66 |                   
 App.tsx              |   54.54 |      100 |   16.66 |   54.54 | 22-155            
 BadCounter.tsx       |      50 |      100 |   33.33 |      50 | 8-11              
 Counter.tsx          |      50 |      100 |   33.33 |      50 | 11-12             
 clickThroughMeme.tsx |   71.42 |      100 |      50 |   71.42 | 15-16             
 index.tsx            |       0 |      100 |     100 |       0 | 7-17              
 reportWebVitals.ts   |       0 |        0 |       0 |       0 | 3-10              
----------------------|---------|----------|---------|---------|-------------------
Test Suites: 1 failed, 1 total
Tests:       1 failed, 1 total
Snapshots:   0 total
Time:        1.797 s
Ran all test suites.
